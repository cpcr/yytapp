<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/mvc"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd"
	   default-lazy-init="true">
	
	<!-- redis连接池的配置 -->
	<bean id="redisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<!-- 控制一个pool可分配多少个jedis实例 -->
		<property name="maxTotal" value="${redis.pool.maxTotal}" />
		<!-- 控制一个pool最多有多少个状态为idle(空闲)的jedis实例 -->
		<property name="maxIdle" value="${redis.pool.maxIdle}" />
		<!-- 控制一个pool最少有多少个状态为idle(空闲)的jedis实例 -->
		<property name="minIdle" value="${redis.pool.minIdle}" />
		<!-- 表示当borrow(引入)一个jedis实例时,最大等待毫秒数,如果超过等待时间,则直接抛出JedisConnectionException 小于零:阻塞不确定的时间,  默认-1 -->
		<property name="maxWaitMillis" value="${redis.pool.maxWaitMillis}" />
		<!-- 获得一个jedis实例的时候是否检查连接可用性;如果为true,则得到的jedis实例均是可用的 -->
		<property name="testOnBorrow" value="${redis.pool.testOnBorrow}" />
		<!-- 在return给pool时,是否检查连接可用性(ping()) -->
		<property name="testOnReturn" value="${redis.pool.testOnReturn}" />

		<!-- 如果为true,表示有一个idle object evitor线程对idle object进行扫描,如果validate失败,此object会被从pool中drop掉;这一项只有在timeBetweenEvictionRunsMillis大于0时才有意义 -->
		<property name="testWhileIdle" value="${redis.pool.testWhileIdle}" />
		<!-- 表示idle object evitor每次扫描的最多的对象数,默认-1 -->		
		<property name="numTestsPerEvictionRun" value="${redis.pool.numTestsPerEvictionRun}" />
		<!-- 表示idle object evitor两次扫描之间要sleep的毫秒数;默认值30000(30秒) -->
		<property name="timeBetweenEvictionRunsMillis" value="${redis.pool.timeBetweenEvictionRunsMillis}" />
		<!-- 表示一个对象至少停留在idle状态的最短时间,然后才能被idle object evitor扫描并驱逐;这一项只有在timeBetweenEvictionRunsMillis大于0时才有意义;默认值60000(60秒) -->
		<property name="minEvictableIdleTimeMillis" value="${redis.pool.minEvictableIdleTimeMillis}" />
	</bean>

	<!-- redis的连接池pool，不是必选项：timeout/password -->
	<bean id="redisPool" class="redis.clients.jedis.JedisPool">
		<constructor-arg index="0" ref="redisPoolConfig" />
		<constructor-arg index="1" value="${redis.connection.host}" />
		<constructor-arg index="2" value="${redis.connection.port}"    type="int" />
		<constructor-arg index="3" value="${redis.connection.timeout}" type="int" />
		<constructor-arg index="4" value="${redis.connection.password}" />
	</bean>
    <!--  
	 <bean id="redisShardedPool" class="redis.clients.jedis.ShardedJedisPool">
        <constructor-arg index="0" ref="redisPoolConfig" />
       	<constructor-arg index="1" value="${redis.connection.hosts}" />
       	<constructor-arg index="2" value="${redis.connection.names}" />
       	<constructor-arg index="3" value="${redis.connection.ports}" />
       	<constructor-arg index="4" value="${redis.connection.timeouts}" />
       	<constructor-arg index="5" value="${redis.connection.weights}" />
    </bean>
    -->
    <bean id="redisService" class="com.yy.framework.cache.redis.impl.RedisServiceImpl">
        <property name="redisPool" ref="redisPool"></property>
    </bean>


	<!--统一Session存储-->
	<bean id="jedisConnectionFactory"
		  class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
		  destroy-method="destroy">
		<property name="hostName" value="${redis.connection.host}" />
		<!--<property name="hostName" value="172.16.100.128" />-->
		<property name="port" value="${redis.connection.port}" />
		<property name="timeout" value="${redis.connection.timeout}" />
		<property name="password" value="${redis.connection.password}" />
		<property name="usePool" value="true" />

		<property name="database" value="5"/>
		<!--<property name="poolConfig" ref="redisPoolConfig" />-->
	</bean>
	<!--<bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">-->

	<!--<bean id="stringRedisSerializer"-->
		  <!--class="org.springframework.data.redis.serializer.StringRedisSerializer"/>-->

	<bean id="redisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">
		<property name="connectionFactory" ref="jedisConnectionFactory" />
	</bean>

	<!-- 这里的是为了下面的 Session策略过滤器提供构造函数传入的参数，因为Session过滤器要依赖该对象来构造，所以创建一个 -->
	<bean name="redisOperationsSessionRepository" class="org.springframework.session.data.redis.RedisOperationsSessionRepository">
		<constructor-arg ref="jedisConnectionFactory"></constructor-arg>
		<!--设置session保持时间 单位为秒-->
		<property name="defaultMaxInactiveInterval" value="1800"/>
	</bean>

	<!-- 这个是Session策略过滤器，即将容器原有的Session持久化机制，代替为Spring的 Redis持久化Session机制。 -->
	<!-- 注意，这个名字与 web.xml里的targetBean的下value是要一致的。 -->
	<bean name="springSession" class="org.springframework.session.web.http.SessionRepositoryFilter">
		<constructor-arg ref="redisOperationsSessionRepository"></constructor-arg>
	</bean>


</beans>
